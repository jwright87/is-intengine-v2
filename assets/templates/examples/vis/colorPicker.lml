<!-- Color picker dialog can be attached to any actor.
    Dialog will be shown after the widget is clicked,
    unless it's disabled. Color picker attribute expects
    ID of a method that consumes a LibGDX Color instance. -->

<textButton id=set colorPicker=setColor>
    Changes color after you close the dialog.
</textButton>

<textButton id=change responsiveColorPicker=changeColor>
    Constantly updates.
</textButton>

<!-- This will not show a dialog, unless disabled
    status is removed: -->
<textButton colorPicker=setColor disabled=true>
    Disabled
</textButton>

<!-- You can also attach a ColorPicker with a separate tag, which
    allows you to set more complex attributes. This is generally not
    advised, though, as ColorPicker is a heavy widget that you have
    to reuse and colorPicker attribute uses the same, cached instance
    every time. ColorPicker tag will create a new instance after each
    occurrence, so you have to manage them manually. -->

<textButton id=new>
    New instance.
<!-- Try replacing "listener" attribute with
    "responsiveListener". -->
    <colorPicker title=Custom. tablePad=40 listener=customColor
            color=red allowAlpha=false onCreate=scheduleDispose>
        Can handle children. <:row/>
        <textButton growX=true>
            Like a window (or a table).
        </textButton>
    </colorPicker>
</textButton>