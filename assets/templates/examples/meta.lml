<!-- You don't have to register macros in Java. LML-made macros
    append their initial text between tags on invocation.
    Their first attribute is an array of macro aliases. -->
<:macro myMacro;someAlias><textButton/></:macro>
<:myMacro/>
<:someAlias/>

<!-- Second, optional macro definition attribute is the
    name of the argument that will be replaced by text
    between invocation's macro tags. -->
<:macro alias="myMacro" replace="content">
    <textButton>{content}</textButton>
</:macro>
<:myMacro>Becomes button's text.</:myMacro>

<!-- Note that named parameters are optional. Even if you
    use named attributes, first and second attributes have
    to be "alias" and "replace" (in any order), as the
    other ones becomes custom attributes available for
    the new macro. -->

<!-- The rest of declaration's attributes are the names of
    additional attributes that might be passed during
    macro invocation. -->
<:macro alias="myMacro" replace="content" size>
    <container size="{size}">
        <textButton>
            {content}
        </textButton>
    </container>
</:macro>
<:myMacro 150>Unnamed params.</:myMacro>
<:myMacro size=125>Named params.</:myMacro>

<!-- Attributes can be unnamed (passing order must match
    declaration order) or named (any order allowed).
    Attributes be also given a default value. -->
<:macro myMacro content width=150 height=30>
    <container width={width} height={height}>
        <textButton>
            {content}
        </textButton>
    </container>
</:macro>
<:myMacro>Using defaults.</:myMacro>
<!-- Using named attributes: -->
<:myMacro height=40>Custom height.</:myMacro>
<!-- Using unnamed attributes: -->
<:myMacro 200 25>Custom size.</:myMacro>