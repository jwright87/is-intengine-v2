<!-- LML has a pretty powerful equation parser that handles
    int, float, boolean and String types (determined at
    runtime) and a number of operators. Equation can be
    evaluated in pretty much any part of the code - it
    uses similar syntax to arguments, except the equation
    has to be proceeded with '='. Spaces between operators
    and values are optional. -->

<label>{=30+12}</label>
<label text="{=AmIShorterThan20 < 20}" />
<label>{="Concat " + strings.}</label>

<!-- Equations also evaluate methods, i18n bundle lines
    and preferences. -->
<label multiline=true color=vis-blue>{=@bundleLine + "\n"
    + #somePreference + '\n' + $someAction}</label>

<!-- Nesting arguments is supported only to an extent.
    Local macro arguments can replace arguments in
    equations, but outside of macros, argument nesting
    is not possible (nor is it usually desired). -->

<:for number=[0,2]>
    <label multiline=true>
        Index: {for:index}
        Result: {= ({number} * 2 + 3) * 10}
    </label>
</:for>

<!-- {=this + {wouldNotBeParsedCorrectly}} -->